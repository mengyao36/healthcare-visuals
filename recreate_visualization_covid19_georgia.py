# -*- coding: utf-8 -*-
"""Recreate-visualization-covid19-georgia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHLze3zA-HomwIwoVsb4jYddsyyolUHN

# Step 1: Loading in Packages
"""

# the below packages are related to loading and performing basic
# transformation of data
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
print('cell successfully ran')

# now we are going to load in some visualization packages to help with careate
# visuals of the data

import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="whitegrid")
print('cell successfully ran')

"""# Loading in Data"""

dataframe = pd.read_csv('https://raw.githubusercontent.com/mengyao36/AHI_Microcourse_Visualization/main/Data/Georgia_COVID/Georgia_COVID-19_Case_Data.csv')

dataframe

len(dataframe)

dataframe.shape

"""## Describing the variables"""

dataframe.info()

list(dataframe)

dataframe['COUNTY'].value_counts()

dataframe_counties = dataframe['COUNTY'].value_counts()
dataframe_counties.head(5)

"""## Transforming Columns"""

dataframe['DATESTAMP']

## creating a copy of the existing column, so we keep the original version
# we could also override the column if we wanted to, but because we are unsure
# where we are going to take the analysis - let's just keep it 

dataframe['DATESTAMP_MOD'] = dataframe['DATESTAMP']
print(dataframe['DATESTAMP_MOD'].head(10))
print(dataframe['DATESTAMP_MOD'].dtypes)

dataframe['DATESTAMP_MOD'] = pd.to_datetime(dataframe['DATESTAMP_MOD'])
dataframe['DATESTAMP_MOD'].dtypes

dataframe[['DATESTAMP', 'DATESTAMP_MOD']]

dataframe['DATESTAMP_MOD_DAY'] = dataframe['DATESTAMP_MOD'].dt.date
dataframe['DATESTAMP_MOD_DAY']

dataframe['DATESTAMP_MOD_YEAR'] = dataframe['DATESTAMP_MOD'].dt.year
dataframe['DATESTAMP_MOD_MONTH'] = dataframe['DATESTAMP_MOD'].dt.month

dataframe['DATESTAMP_MOD_YEAR']

dataframe['DATESTAMP_MOD_MONTH']

dataframe['DATESTAMP_MOD_MONTH_YEAR'] = dataframe['DATESTAMP_MOD'].dt.to_period('M')
dataframe['DATESTAMP_MOD_MONTH_YEAR'].sort_values()

dataframe['DATESTAMP_MOD_WEEK'] = dataframe['DATESTAMP_MOD'].dt.week
dataframe['DATESTAMP_MOD_WEEK']

dataframe['DATESTAMP_MOD_QUARTER'] = dataframe['DATESTAMP_MOD'].dt.to_period('Q')
dataframe['DATESTAMP_MOD_QUARTER']

dataframe['DATESTAMP_MOD_QUARTER'].sort_values()

dataframe['DATESTAMP_MOD_DAY_STRING'] = dataframe['DATESTAMP_MOD_DAY'].astype(str)
dataframe['DATESTAMP_MOD_WEEK_STRING'] = dataframe['DATESTAMP_MOD_WEEK'].astype(str)
dataframe['DATETIME_STRING'] = dataframe['DATESTAMP_MOD_MONTH_YEAR'].astype(str)

"""## Getting the counties required for our analysis

We know that the counties we want to analyze our: 
- Cobb
- DeKalb
- Fulton
- Gwinnett
- Hall
"""

dataframe['COUNTY']

countList = ['COBB', 'DEKALB', 'FULTON', 'GWINNETT', 'HALL']
countList

selectCounties = dataframe[dataframe['COUNTY'].isin(countList)]
len(selectCounties)

"""## Getting just the specific date/time frame we want

`dataframe` = length ~ 90,000

`selectCounties` = length 2830

`selectCountyTime` = ??? / TBD
"""

selectCountyTime = selectCounties

selectCountyTime['DATESTAMP_MOD_MONTH_YEAR']

selectCountTime_april2020 = selectCountyTime[selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-04']
len(selectCountTime_april2020)

selectCountTime_may2020 = selectCountyTime[selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-05']
len(selectCountTime_may2020)

selectCountTime_aprilmay2020 = selectCountyTime[(selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-04') | (selectCountyTime['DATESTAMP_MOD_MONTH_YEAR'] == '2020-05')]
len(selectCountTime_aprilmay2020)

selectCountTime_aprilmay2020.head(50)

"""## Creating the final dataframe/specific columns-features-attributes-that we care about"""

finalDF = selectCountTime_aprilmay2020[[
                                        'COUNTY',
                                        'DATESTAMP_MOD',
                                        'DATESTAMP_MOD_DAY',
                                        'DATESTAMP_MOD_DAY_STRING',
                                        'DATETIME_STRING',
                                        'DATESTAMP_MOD_MONTH_YEAR',
                                        'C_New', # cases - new
                                        'C_Cum', # cases - total
                                        'H_New', # hospitalizations - new
                                        'H_Cum', # hospitalizations - total
                                        'D_New', # death - new
                                        'D_Cum', # death - total

]]

finalDF

"""# Looking at total covid cases by month"""

finalDF_dropdups = finalDF.drop_duplicates(subset=['COUNTY', 'DATETIME_STRING'], keep='last')
finalDF_dropdups

pd.pivot_table(finalDF_dropdups, values='C_Cum', index='COUNTY', columns=['DATESTAMP_MOD_MONTH_YEAR'], aggfunc=np.sum)

visl = sns.barplot(x='DATESTAMP_MOD_MONTH_YEAR', y='C_Cum', data=finalDF_dropdups)

vis2 = sns.barplot(x='DATESTAMP_MOD_MONTH_YEAR', y='C_Cum', hue='COUNTY', data=finalDF_dropdups)

plotly1 = px.bar(finalDF_dropdups, x='DATETIME_STRING', y='C_Cum', color='COUNTY', barmode='group')
plotly1.show()

plotly2 = px.bar(finalDF_dropdups, x='DATETIME_STRING', y='C_Cum', color='COUNTY', barmode='stack')
plotly2.show()

plotly2 = px.bar(finalDF_dropdups, x='DATETIME_STRING', y='C_Cum', color='COUNTY', barmode='overlay')
plotly2.show()

plotly2 = px.bar(finalDF_dropdups, x='DATETIME_STRING', y='C_Cum')
plotly2.show()

"""## Looking at total covid cases by DAY"""

daily = finalDF
daily
len(daily)

pd.pivot_table(daily, values='C_Cum', index='COUNTY', columns='DATESTAMP_MOD_DAY', aggfunc=np.sum)

tempDF = pd.pivot_table(daily, values='C_Cum', index='DATESTAMP_MOD_DAY', columns='COUNTY', aggfunc=np.sum)
tempDF.head(50)

startdate = pd.to_datetime("2020-04-26").date()
enddate = pd.to_datetime("2020-05-09").date()

maskFilter = (daily['DATESTAMP_MOD_DAY'] >= startdate) & (daily['DATESTAMP_MOD_DAY'] <= enddate)
dailySpecific = daily.loc[maskFilter]
dailySpecific

dailySpecific[dailySpecific['COUNTY'] == 'FULTON']

vis3 = sns.lineplot(data=dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum')

vis4 = sns.lineplot(data=dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum', hue='COUNTY')

plotly3 = px.bar(dailySpecific, x='DATESTAMP_MOD_DAY', y='C_Cum', color='COUNTY')
plotly3.show()

plotly4 = px.bar(dailySpecific,
                 x='DATESTAMP_MOD_DAY', 
                 y='H_New', 
                 color='COUNTY',
                 barmode='group')
plotly4.show()

plotly5 = px.bar(dailySpecific,
                 x='DATESTAMP_MOD_DAY', 
                 y='H_Cum', 
                 color='COUNTY',
                 barmode='group')
plotly5.show()

plotly6 = px.bar(dailySpecific,
                 x='DATESTAMP_MOD_DAY', 
                 y='D_New', 
                 color='COUNTY',
                 barmode='group')
plotly6.show()

plotly7 = px.bar(dailySpecific,
                 x='DATESTAMP_MOD_DAY', 
                 y='D_Cum', 
                 color='COUNTY',
                 barmode='group')
plotly7.show()

dailySpecific['newHospandDeathCovid'] = dailySpecific['D_New'].astype(int) + dailySpecific['H_New'].astype(int) + dailySpecific['C_New'].astype(int)
dailySpecific['newHospandDeathCovid']

dailySpecific['newHospandDeath'] = dailySpecific['D_New'].astype(int) + dailySpecific['H_New'].astype(int)
dailySpecific['newHospandDeath']

plotly8 = px.bar(dailySpecific,
                 x='DATESTAMP_MOD_DAY', 
                 y='newHospandDeathCovid', 
                 color='COUNTY',
                 title='Georgia 2020 COVID Data: Total New Hospitalizations, Deaths, and COVID cases by COUNTY', 
                 labels={
                     'DATESTAMP_MOD_DAY' : 'Time (Month, Day, Year)',
                     'newHospandDeathCovid' : 'Total Count'
                 }, 
                 barmode='group')
plotly8.update_layout(
    xaxis=dict(
        tickmode = 'linear',
        type = 'category'
    )
)
plotly8.show()